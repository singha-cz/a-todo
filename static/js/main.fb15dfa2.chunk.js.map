{"version":3,"sources":["components/TaskList/TaskList.module.css","components/Button/Button.js","components/Task/Task.js","context/todo.context.js","components/TaskList/TaskList.js","App.js","serviceWorker.js","index.js","components/Button/Button.module.css","components/Task/Task.module.css"],"names":["module","exports","App","props","onClick","disabled","outline","link","children","title","color","icon","circle","className","css","btn","btnOutline","btnLink","library","add","faTimes","faCircle","faCheckCircle","Task","useState","editable","setEditable","id","completed","created","remove","complete","save","doSave","e","target","value","taskNameInput","type","name","defaultValue","onBlur","onKeyUp","keyCode","keyUp","onFocus","event","select","autoFocus","taskCreated","taskCompleted","taskTitle","taskName","pointer","taskItem","Button","size","TodoContext","React","createContext","TodoContextProvider","JSON","parse","localStorage","getItem","state","setState","useEffect","setItem","stringify","Provider","faPlus","TaskList","now","Date","search","setSearch","useContext","tasks","setTasks","taskId","newTasks","map","item","toLocaleString","filter","realTitle","searchedTasks","toLowerCase","includes","taskCount","length","taskList","key","unfinished","announcement","addButton","newId","reduce","a","b","newTask","placeholder","onChange","newSearch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,WAAa,6BAA6B,SAAW,2BAA2B,UAAY,8B,wNCgC/FC,MA7Bf,SAAaC,GAAQ,IAAD,EAWbA,GAAS,GATVC,EAFc,EAEdA,QACEC,EAHY,EAGZA,SAHY,IAIZC,eAJY,SAKZC,EALY,EAKZA,KACAC,EANY,EAMZA,SANY,IAOZC,aAPY,MAOJ,GAPI,MAQZC,aARY,MAQJ,UARI,MASZC,YATY,aAUZC,cAVY,SAajB,OACG,4BACGR,QAASA,EACTC,SAAUA,EACVI,MAAOA,EACPI,UAAS,UAAKC,IAAIC,IAAT,YAAgBL,EAAMI,IAAI,OAAD,OAAQJ,IAAS,GAA1C,YAAgDJ,EAAQQ,IAAIE,WAAW,GAAvE,aAA8ET,EAAKO,IAAIG,QAAQ,GAA/F,YAAqGL,EAAOE,IAAIF,OAAO,KAG7HD,GACA,kBAAC,IAAD,CAAiBA,KAAMA,IAEzBH,I,sBCrBVU,IAAQC,IAAIC,IAASC,IAAUC,KAE/B,IAsEeC,EAtEF,SAACpB,GAAW,IAAD,EACWqB,oBAAS,GADpB,mBACdC,EADc,KACJC,EADI,OAUjBvB,GAAS,GAPVwB,EAHkB,EAGlBA,GAHkB,IAIhBC,iBAJgB,MAIJ,GAJI,MAKhBC,eALgB,MAKN,GALM,MAMhBpB,aANgB,MAMR,GANQ,MAOhBqB,cAPgB,MAOP,aAPO,MAQhBC,gBARgB,MAQL,aARK,MAShBC,YATgB,MAST,aATS,EAgBfC,EAAS,SAACC,EAAGP,GAChBD,GAAY,GACZM,EAAKL,EAAIO,EAAEC,OAAOC,QAmBfC,EAAgB,2BACnBC,KAAK,OACLzB,UAAU,eACV0B,KAAK,WACLC,aAAc/B,EACdgC,OAAQ,SAACP,GAAD,OAAOD,EAAOC,EAAGP,IACzBe,QAAS,SAACR,GAAD,OAtBE,SAACA,EAAGP,GACf,OAAQO,EAAES,SACP,KAAK,GACFV,EAAOC,EAAGP,GACV,MAEH,KAAK,GACFD,GAAY,IAeFkB,CAAMV,EAAGP,IACzBkB,QATiB,SAACC,GAAD,OAAWA,EAAMX,OAAOY,UAUzCC,WAAS,IAENC,EAAcpB,EAAO,yBAAgBA,GAAY,IACjDqB,EAAgBtB,EAAS,0BAAiBA,GAAc,GACxDuB,EAAS,UAAMF,EAAN,YAAqBC,EAArB,iCACTE,EAAW3B,EAAWY,EAAgB,0BACzC5B,MAAO0C,EACP/C,QAxCW,WACXsB,GAAaD,IAwCbZ,UAAS,UAAKe,EAAYd,IAAIoC,cAAgB,GAArC,YAA2CpC,IAAIuC,UAEvD5C,GAEJ,OACG,wBAAII,UAAWC,IAAIwC,UAChB,8BACG,kBAACC,EAAD,CAAQhD,MAAI,EAACH,QAAS,kBAAM2B,EAASJ,IAAKlB,MAAOmB,EAAY,oDAAmC,+BAC7F,kBAAC,IAAD,CAAiBlB,MAAOkB,EAAY,UAAY,GAAI4B,KAAK,KAAK7C,KAAM,CAAC,MAAOiB,EAAY,eAAiB,aAF/G,IAGcwB,GAJjB,IAKW,0BAAMvC,UAAWC,IAAIgB,QAC1B,kBAACyB,EAAD,CAAQ9C,MAAM,SAASF,MAAI,EAACH,QAAS,kBAAM0B,EAAOH,IAAKhB,KAAM,aCxEnE8C,EAAcC,IAAMC,cAAc,CAAC,GAAI,eAEvCC,EAAsB,SAACzD,GAAW,IAAD,EACVqB,mBAASqC,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IAD5C,mBAC7BC,EAD6B,KACtBC,EADsB,KAOpC,OAJAC,qBAAU,WACPJ,aAAaK,QAAQ,QAASP,KAAKQ,UAAUJ,MAC7C,CAACA,IAGD,kBAACR,EAAYa,SAAb,CAAsBlC,MAAO,CAAC6B,EAAOC,IACjC/D,EAAMK,W,iBCLhBU,IAAQC,IAAIoD,KAEZ,IAsHeC,EAtHE,SAACrE,GACf,IAAMsE,EAAM,IAAIC,KADS,EAEGlD,qBAFH,mBAElBmD,EAFkB,KAEVC,EAFU,OAGCC,qBAAWpB,GAHZ,mBAGlBqB,EAHkB,KAGXC,EAHW,KAgBnBhD,EAAW,SAACiD,GACf,IAAMC,EAAWH,EAAMI,KAAI,SAAAC,GAGxB,OAFIA,EAAKxD,KAAOqD,IACbG,EAAKvD,UAAYuD,EAAKvD,UAAY,KAAO6C,EAAIW,kBACzCD,KAEVJ,EAASE,IAGNnD,EAAS,SAACkD,GACb,IAAMC,EAAWH,EAAMO,QAAO,SAAAF,GAAI,OAAIA,EAAKxD,KAAOqD,KAClDD,EAASE,IAGNjD,EAAO,SAACgD,EAAQvE,GACnB,IAAMwE,EAAWH,EAAMI,KAAI,SAAAC,GACxB,GAAIA,EAAKxD,KAAOqD,EAAO,CACpB,IAAIM,EAAY7E,EACE,KAAd6E,IAAkBA,EAAY,iCAClCH,EAAK1E,MAAQ6E,EAEhB,OAAOH,KAEVJ,EAASE,IAkBNM,EAAgBZ,EAASG,EAAMO,QAAO,SAAAF,GACzC,OAAOA,EAAK1E,MAAM+E,cAAcC,SAASd,EAAOa,kBAC9CV,EAGCY,EAAYH,EAAcI,OAC1BC,EAAWL,EAAcI,OAAS,EAAIJ,EAAcL,KAAI,SAAAC,GAAI,OAC/D,kBAAC,EAAD,iBACOA,EADP,CAEGU,IAAKV,EAAKxD,GACVG,OAAQA,EACRC,SAAUA,EACVC,KAAMA,QACH,GAEH8D,EAAahB,EAAMO,QAAO,SAAAF,GAAI,OAAKA,EAAKvD,aACxCmE,EAAeD,EAAWH,OAAS,EAApB,mDAA+CG,EAAWH,OAA1D,MAAuE,sDAAsB,8CAClH,OACG,oCACG,mDAGMD,EAAY,GACZ,mCAASA,EAAT,KAEH,0BAAM7E,UAAWC,IAAIkF,WAClB,kBAACzC,EAAD,CAAQ7C,MAAM,UAAUE,QAAM,EAACR,QA9E1B,SAAC8B,GACf,IAAM+D,EAAQnB,EAAMa,OAAS,EAAIb,EAAMoB,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAExE,GAAKyE,EAAEzE,GAAKwE,EAAIC,KAAGzE,GAAK,EAAI,EAChF0E,EAAU,CACb5F,MAAM,mBAAD,OAAewF,EAAQ,GAC1BpE,QAAS4C,EAAIW,iBACbzD,GAAIsE,GAEHhB,EAAQ,sBAAOH,GAAP,CAAcuB,IAC5BtB,EAASE,IAsEkDtE,KAAK,OAAOF,MAAM,0BAIvEqE,EAAMa,OAAS,GACf,2BACGrD,KAAK,OACLC,KAAK,SACLH,MAAOuC,GAAkB,GACzB2B,YAAY,uBACZzF,UAAU,eACV0F,SApDS,SAACrE,GACnB,IAAMsE,EAAYtE,EAAEC,OAAOC,MAC3BwC,EAAU4B,IAmDD9D,QAhDE,SAACR,GACZ,OAAQA,EAAES,SACP,KAAK,GACFiC,EAAU,MA8CPnE,MAAO,+FAGb,2BAEMiF,EAAY,GACZK,GAGN,6BAEMR,EAAcI,OAAS,GACvB,2BAAG,iFAEN,wBAAI9E,UAAWC,IAAI8E,UACfA,MCzGD1F,G,MAVH,WACT,OACG,yBAAKW,UAAU,OACZ,kBAAC,EAAD,KACG,kBAAC,EAAD,UCGQ4F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5B5H,EAAOC,QAAU,CAAC,IAAM,oBAAoB,cAAc,4BAA4B,WAAa,2BAA2B,QAAU,wBAAwB,OAAS,yB,kBCAzKD,EAAOC,QAAU,CAAC,SAAW,uBAAuB,OAAS,qBAAqB,cAAgB,4BAA4B,QAAU,sBAAsB,UAAY,2B","file":"static/js/main.fb15dfa2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"floatRight\":\"TaskList_floatRight__2JyF6\",\"taskList\":\"TaskList_taskList__3M2t4\",\"addButton\":\"TaskList_addButton__3dY0g\"};","import React from 'react';\r\nimport css from './Button.module.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nfunction App(props) {\r\n   const {\r\n      onClick\r\n      , disabled\r\n      , outline = false\r\n      , link\r\n      , children\r\n      , title = \"\"\r\n      , color = \"primary\"\r\n      , icon = false\r\n      , circle = false\r\n   } = props || {};\r\n\r\n   return (\r\n      <button \r\n         onClick={onClick} \r\n         disabled={disabled} \r\n         title={title}\r\n         className={`${css.btn} ${color?css[`btn-${color}`]:\"\"} ${outline?css.btnOutline:\"\"}  ${link?css.btnLink:\"\"} ${circle?css.circle:\"\"}`}\r\n      >\r\n         {\r\n            icon &&\r\n            <FontAwesomeIcon icon={icon} />\r\n         }\r\n         {children}\r\n      </button>\r\n   );\r\n}\r\n\r\nexport default App;","import React, { useState } from 'react';\r\nimport css from './Task.module.css';\r\nimport Button from '../Button/Button';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faCircle, faCheckCircle } from '@fortawesome/free-regular-svg-icons';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\nlibrary.add(faTimes, faCircle, faCheckCircle);\r\n\r\nconst Task = (props) => {\r\n   const [editable, setEditable] = useState(false);\r\n   const {\r\n      id\r\n      , completed = \"\"\r\n      , created = \"\"\r\n      , title = \"\"\r\n      , remove = () => { }\r\n      , complete = () => { }\r\n      , save = () => { }\r\n   } = props || {};\r\n\r\n   const click = () => {\r\n      setEditable(!editable)\r\n   }\r\n\r\n   const doSave = (e, id) => {\r\n      setEditable(false);\r\n      save(id, e.target.value);\r\n   }\r\n\r\n   const keyUp = (e, id) => {\r\n      switch (e.keyCode) {\r\n         case 13: {\r\n            doSave(e, id);\r\n            break;\r\n         }\r\n         case 27: {\r\n            setEditable(false);\r\n            break;\r\n         }\r\n         default: { }\r\n      }\r\n   }\r\n\r\n   const handleFocus = (event) => event.target.select();\r\n\r\n   const taskNameInput = <input\r\n      type=\"text\"\r\n      className=\"form-control\"\r\n      name=\"newTitle\"\r\n      defaultValue={title}\r\n      onBlur={(e) => doSave(e, id)}\r\n      onKeyUp={(e) => keyUp(e, id)}\r\n      onFocus={handleFocus}\r\n      autoFocus\r\n   />;\r\n   const taskCreated = created ? `Vytvořen: ${created}` : \"?\";\r\n   const taskCompleted = completed ? `, Ukončen: ${completed}` : \"\";\r\n   const taskTitle = `${taskCreated} ${taskCompleted} - Kliknutím upravte text `;\r\n   const taskName = editable ? taskNameInput : <span\r\n      title={taskTitle}\r\n      onClick={click}\r\n      className={`${completed ? css.taskCompleted : \"\"} ${css.pointer}`}\r\n   >\r\n      {title}\r\n   </span>;\r\n   return (\r\n      <li className={css.taskItem}>\r\n         <span>\r\n            <Button link onClick={() => complete(id)} title={completed ? \"Zrušit označení hotového úkolu\" : \"Označit jako hotový\"}>\r\n               <FontAwesomeIcon color={completed ? \"#007022\" : \"\"} size=\"lg\" icon={[\"far\", completed ? \"check-circle\" : \"circle\"]} />\r\n            </Button> {taskName}\r\n         </span> <span className={css.remove}>\r\n            <Button title=\"Smazat\" link onClick={() => remove(id)} icon={\"times\"} />\r\n         </span>\r\n      </li>\r\n   );\r\n}\r\n\r\nexport default Task;","import React, {useState, useEffect} from 'react';\r\nconst TodoContext = React.createContext([{}, ()=>{}]);\r\n\r\nconst TodoContextProvider = (props) => {\r\n   const [state, setState] = useState(JSON.parse(localStorage.getItem('tasks')) || []);\r\n\r\n   useEffect(() => {\r\n      localStorage.setItem('tasks', JSON.stringify(state));\r\n   }, [state]);   \r\n\r\n   return (\r\n      <TodoContext.Provider value={[state, setState]}>\r\n         {props.children}\r\n      </TodoContext.Provider>\r\n   );\r\n}\r\n\r\nexport { TodoContext, TodoContextProvider }\r\n","import React, { useState, useContext } from 'react';\r\nimport Task from '../Task/Task';\r\nimport { TodoContext } from '../../context/todo.context';\r\nimport Button from '../../components/Button/Button';\r\nimport css from './TaskList.module.css';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nlibrary.add(faPlus);\r\n\r\nconst TaskList = (props) => {\r\n   const now = new Date();\r\n   const [search, setSearch] = useState();\r\n   const [tasks, setTasks] = useContext(TodoContext);\r\n\r\n   const clickAdd = (e) => {\r\n      const newId = tasks.length > 0 ? tasks.reduce((a, b) => a.id > b.id ? a : b).id + 1 : 0;\r\n      const newTask = {\r\n         title: `Nový úkol ${newId + 1}`\r\n         , created: now.toLocaleString()\r\n         , id: newId\r\n      };\r\n      const newTasks = [...tasks, newTask];\r\n      setTasks(newTasks);\r\n   }\r\n\r\n   const complete = (taskId) => {\r\n      const newTasks = tasks.map(item => {\r\n         if (item.id === taskId)\r\n            item.completed = item.completed ? null : now.toLocaleString();\r\n         return item;\r\n      });\r\n      setTasks(newTasks);\r\n   }\r\n\r\n   const remove = (taskId) => {\r\n      const newTasks = tasks.filter(item => item.id !== taskId);\r\n      setTasks(newTasks);\r\n   }\r\n\r\n   const save = (taskId, title) => {\r\n      const newTasks = tasks.map(item => {\r\n         if (item.id === taskId){\r\n            let realTitle = title;\r\n            if (realTitle === \"\") realTitle = \"-- úkol bez názvu :/ --\"\r\n            item.title = realTitle;\r\n         }\r\n         return item;\r\n      });\r\n      setTasks(newTasks);\r\n   }\r\n\r\n   const searchChange = (e) => {\r\n      const newSearch = e.target.value;\r\n      setSearch(newSearch);\r\n   }\r\n\r\n   const keyUp = (e) => {\r\n      switch (e.keyCode) {\r\n         case 27: {\r\n            setSearch(\"\");\r\n            break;\r\n         }\r\n         default: { }\r\n      }\r\n   }   \r\n\r\n   const searchedTasks = search ? tasks.filter(item => {\r\n      return item.title.toLowerCase().includes(search.toLowerCase())\r\n   }) : tasks;\r\n\r\n\r\n   const taskCount = searchedTasks.length;\r\n   const taskList = searchedTasks.length > 0 ? searchedTasks.map(item =>\r\n      <Task\r\n         {...item}\r\n         key={item.id}\r\n         remove={remove}\r\n         complete={complete}\r\n         save={save}\r\n      />) : [];\r\n\r\n   const unfinished = tasks.filter(item => !item.completed);\r\n   const announcement = unfinished.length > 0 ? `Zbývá ještě udělat (${unfinished.length}):` : <span>Všechno hotovo, <strong>gratulki!</strong></span>;\r\n   return (\r\n      <>\r\n         <h3>\r\n            Seznam úkolů\r\n            {\r\n               taskCount > 0 &&\r\n               <span> ({taskCount})</span>\r\n            }\r\n            <span className={css.addButton}>\r\n               <Button color=\"primary\" circle onClick={clickAdd} icon=\"plus\" title=\"Přidat úkol\"></Button>\r\n            </span>\r\n         </h3>\r\n         {\r\n            tasks.length > 0 &&\r\n            <input \r\n               type=\"text\" \r\n               name=\"search\" \r\n               value={search ? search : \"\"} \r\n               placeholder=\"Hledat úkol…\" \r\n               className=\"form-control\" \r\n               onChange={searchChange} \r\n               onKeyUp={keyUp}  \r\n               title={\"Vyhledávejte/filtrujte úkoly dle názvu. Stisknutím Esc se filtr zruší.\"}\r\n            />\r\n         }\r\n         <p>\r\n            {\r\n               taskCount > 0 &&\r\n               announcement\r\n            }\r\n         </p>\r\n         <div>\r\n            {\r\n               searchedTasks.length < 1 &&\r\n               <p><em>-- Nenašel jsem žádný úkol --</em></p>\r\n            }\r\n            <ul className={css.taskList}>\r\n               {taskList}\r\n            </ul>\r\n         </div>\r\n      </>\r\n   )\r\n}\r\n\r\nexport default TaskList;","import React from 'react';\nimport TaskList from './components/TaskList/TaskList';\nimport { TodoContextProvider } from './context/todo.context';\nimport './App.css';\n\nconst App = () => {\n   return (\n      <div className=\"App\">\n         <TodoContextProvider>\n            <TaskList />\n         </TodoContextProvider>\n      </div>\n   );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__dwScJ\",\"btn-primary\":\"Button_btn-primary__1BBTP\",\"btnOutline\":\"Button_btnOutline__1Wp58\",\"btnLink\":\"Button_btnLink__3WRy_\",\"circle\":\"Button_circle__2X3f9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskItem\":\"Task_taskItem__3MONH\",\"remove\":\"Task_remove__oghC3\",\"taskCompleted\":\"Task_taskCompleted__wcQcQ\",\"pointer\":\"Task_pointer__OBYg2\",\"highlight\":\"Task_highlight__2u_Zd\"};"],"sourceRoot":""}